Part 1
===========================================================================================
| ft_memset	: Set the void *s index 0 to 'n' - 1 byte to 'c'.			  |
|											  |
| prototype	: void	*ft_memset(void *s, int c, size_t n);				  |
|											  |
| return	: An address of *s.							  |
===========================================================================================
| ft_bzero	: Set the void *s index 0 to 'n' - 1 byte to '\0'.			  |
|											  |
| prototype	: void	ft_bzero(void *s, size_t n);					  |
|											  |
| return	: -									  |
===========================================================================================
| ft_calloc	: Is same with malloc but have initialize value is 0.			  |
|		  **make sure nmemb & size is positive. 				  |
|											  |
| prototype	: void	*ft_calloc(size_t nmemb, size_t size);				  |
|											  |
| return	: A pointer that have initialize value. If cant allocate or nmemb & size  |
|		  is negative return NULL.						  |
===========================================================================================
| ft_memcpy	: copy 'src' to 'dest' in 'n' byte.					  |
|											  |
| prototype	: void	*ft_memcpy(void *dest, const void *src, size_t n);		  |
|											  |
| return	: A new 'dest'.								  |
===========================================================================================
| ft_memmove	: It like memcpy but it check that the memory areas is overlap. If memory |
|		  areas of 'dest' > 'src' copy 'src' form 'n' - 1 to 0 else copy form 0 to|
| 		  'n' - 1.								  |
|											  |
| prototype	: void	*ft_memmove(void *dest, const void *src, size_t n);		  |
|											  |
| return	: A new 'dest'.								  |
===========================================================================================
| ft_memchr	: Find an address of 'c' in 's' from 0 to 'n' - 1.			  |
|		  ** make sure c is unsigned char(127).					  |
|											  |
| prototype	: void	*ft_memchr(const void *s, int c, size_t n);			  |
|											  |
| return	: An address of 's' that start with 'c'. If not have return NULL 	  |
===========================================================================================
| ft_memcmp	: Compare a 's1' and 's2' from 0 to 'n' - 1 byte.			  |
|											  |
| prototype	: int ft_memcmp(const void *s1, const void *s2, size_t n);		  |
|											  |
| return	: A different of 's1' and 's2'.						  |
===========================================================================================
| ft_strlen	: Count length of a char pointer form start to '\0'.			  |
|											  |
| prototpy	: size_t ft_strlen(const char *s);				  	  |
|											  |
| return	: A length of a char pointer. 						  |
===========================================================================================
| ft_strdup	: duplicate a 's' to a new char pointer. 				  |
|											  |
|											  |
|											  |
| return	: A new char pointer or NULL if allocate is fail.			  |
===========================================================================================
| ft_strlcat	: Is concat a 'src' to 'dest' by the new char pointer is should have a    |
|		  a length = 'size'.							  |
|											  |
| prototype	: char	*ft_strdup(const char *s);					  |
|											  |
| return	: length of 'dest' + 'src' or if 'size' is less or equal than length of   |
|		  'dest' return 'size' + length of 'src'.			          |
===========================================================================================
| ft_strlcpy	: Copy a 'src' (0 to 'size' - 1) to 'dest'.				  |
|											  |
| prototype	: size_t ft_strlcat(char *dest, char *src, size_t size);		  |
|											  |
| return	: length of 'src' and if 'size' is 0 return length of 'src'		  | 
===========================================================================================
| ft_strchr	: Find an address of 'c' in 's'	by forward. 				  |
|		  ** make sure c is unsigned char(127).					  |
|											  |
| prototype	: char	*ft_strchr(const char *s, int c);				  |
|											  |
| return	: An address of 's' that start with 'c'. If not have return NULL.	  |
===========================================================================================
| ft_strrchr	: Find an address of 'c' in 's'	by backward. 				  |
|		  ** make sure c is unsigned char(127).					  |
|											  |
| prototype	: char	*ft_strrchr(const char *s, int c);				  |
|											  |
| return	: An address of 's' that start with 'c'. If not have return NULL.	  |
===========================================================================================
| ft_strnstr	: Like strchr but now Find string(char*) 'little' form 'big' in range of  |
|		  'len' and that string should have a length contain with 'len'.	  |
|											  |
| prototype	: char	*ft_strnstr(const char *big, const char *little, size_t len);	  |
|											  |
| return	: address of big that found a little, but if 'little' is NULL return	  |
|		  a full address of big or not found return NULL.			  |
===========================================================================================
| ft_strncmp	: Compare a 's1' and 's2'.						  |
|											  |
| prototype	: int ft_strncmp(const char *s1, const char *s2, size_t n);		  |
|											  |
| return	: A different of 's1' and 's2'.						  |
===========================================================================================
| ft_atoi	: Turn an ascii that digit to Integer (by can skip whitespace, 	  	  |
|		  have only one sign(+,-) before a digit, cut it if see that not a digit. |
|											  |
| prototype	: int	ft_atoi(const char *nptr);					  |
|											  |
| return	: An Integer or 0 if it cant change. 					  |
===========================================================================================
| ft_isalpha	: Check is 'c' is alphabet.						  |
|											  |
| prototype	: int	ft_isalpha(int c);					          |
|											  |
| return	: 0 if it not 1 if it correct.						  |
===========================================================================================
| ft_isdigit	: Check is 'c' is digit.						  |
|											  |
| prototype	: int	ft_isdigit(int c);					          |
|											  |
| return	: 0 if it not 1 if it correct.						  |
===========================================================================================
| ft_isalnum	: Check is 'c' is alphabet or digit.					  |
|											  |
| prototype	: int	ft_isalnum(int c);					          |
|											  |
| return	: 0 if it not 1 if it correct.						  |
===========================================================================================
| ft_isascii	: Check is 'c' is ascii.						  |
|											  |
| prototype	: int	ft_isascii(int c);					          |
|											  |
| return	: 0 if it not 1 if it correct.						  |
===========================================================================================
| ft_isprint	: Check is 'c' is printable.						  |
|											  |
| prototype	: int	ft_isprint(int c);					          |
|											  |
| return	: 0 if it not 1 if it correct.						  |
===========================================================================================
| ft_toupper	: Turn 'c' to Uppercase.						  |
|											  |
| prototype	: int	ft_toupper(int c);					          |
|											  |
| return	: c in Uppercase from.							  |
===========================================================================================
| ft_tolower	: Turn 'c' to lowwercase.						  |
|											  |
| prototype	: int	ft_tolowwer(int c);					          |
|											  |
| return	: c in lowwercase from.							  |
===========================================================================================

Part 2
===========================================================================================
| ft_strmapi	: Create a new char pointer that is 's' apply by '*f'.			  |
|											  |
| prototype	: char	*ft_strmapi(char const *s, char (*f)(unsigned int, char));	  |
|											  |
| return	: A new char pointer or NULL if allocate fail.				  |
===========================================================================================
| ft_substr	: Create a substring form 's' add 'start' to 'len'			  |
|											  |
| prototype	: char	*ft_substr(char const *s, unsigned int start, size_t len);	  |
|											  |
| return	: A substring or if 'start' is more than 's' length or if 'len' more-equal|
|		  than 's' legnth return NULL that can free(). 				  |
===========================================================================================
| ft_strjoin	: Create a new char pointer that join 's1' and 's2'.			  |
|											  |
| prototype	: char	*ft_strjoin(char const *s1, char const *s2);			  |
|											  |
| return	: A new char pointer or NULL if allocate fail.				  |
===========================================================================================
| ft_strtrim	: Create a new char pointer that remove a char in 'set' form start and end|
|		  of char pointer.			  				  |
|											  |
| prototype	: char	*ft_strtrim(char const *s1, char const *set);			  |
|											  |
| return	: A new char pointer or NULL if allocate fail.				  |
===========================================================================================
| ft_split	: Create a array of char pointer that cutting 's' by 'c'.		  |
|											  |
| prototype	: char	**ft_split(char const *s, char c);				  |
|											  |
| return	: An array of char pointer or NULL if allocate fail or {NULL} 		  |
|		  if '*s' is NULL.				    			  |
===========================================================================================
| ft_itoa	: Turn an Integer to ascii digit.					  |
|											  |
| prototype	: char	*ft_itoa(int n);						  |
|											  |
| return	: An digit in char pointer type						  |
===========================================================================================
| ft_striteri	: Do 's' with '*f' by loop.						  |
|											  |
| prototype	: void	ft_striteri(char *s, void (*f)(unsigned int, char*));		  |
|											  |
| return	: -									  |
===========================================================================================
| ft_putchar_fd	: Write a char in by file descriptor = 'fd'.				  |
|											  |
| prototype	: void	ft_putchar_fd(char c, int fd);	 				  |
|											  |
| return	: -									  |
===========================================================================================
| ft_putstr_fd	: Write a char pointer in by file descriptor = 'fd'.			  |
|											  |
| prototype	: void	ft_putstr_fd(char c, int fd);	 				  |
|											  |
| return	: -									  |
===========================================================================================
| ft_putendl_fd	: ft_putstr_fd but have a new line.			  		  |
|											  |
| prototype	: void	ft_putendl_fd(char c, int fd);	 				  |
|											  |
| return	: -									  |
===========================================================================================
| ft_putnbr_fd	: Write a number in by file descriptor = 'fd'. (Handle INTMAX)		  |
|											  |
| prototype	: void	ft_putnbr_fd(int n, int fd);	 				  |
|											  |
| return	: -									  |
===========================================================================================


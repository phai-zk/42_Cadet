Part 1
===========================================================================================
| ft_memset	: Set the void *s index 0 to 'n' - 1 byte to 'c'.			  |
| return	: An address of *s.							  |
===========================================================================================
| ft_bzero	: Set the void *s index 0 to 'n' - 1 byte to '\0'.			  |
| return	: -									  |
===========================================================================================
| ft_calloc	: Is same with malloc but have initialize value is 0.			  |
|		  **make sure nmemb & size is positive. 				  |
| return	: A pointer that have initialize value. If cant allocate or nmemb & size  |
|		  is negative return NULL.						  |
===========================================================================================
| ft_memcpy	: copy 'src' to 'dest' in 'n' byte.					  |
| return	: A new 'dest'.								  |
===========================================================================================
| ft_memmove	: It like memcpy but it check that the memory areas is overlap. If memory |
|		  areas of 'dest' > 'src' copy 'src' form 'n' - 1 to 0 else copy form 0 to|
| 		  'n' - 1.								  |
| return	: A new 'dest'.								  |
===========================================================================================
| ft_memchr	: Find an address of 'c' in 's' from 0 to 'n' - 1.			  |
|		  ** make sure c is unsigned char(127).					  |
| return	: An address of 's' that start with 'c'. If not have return NULL 	  |
===========================================================================================
| ft_memcmp	: Compare a 's1' and 's2' from 0 to 'n' - 1 byte.			  |
| return	: A different of 's1' and 's2'.						  |
===========================================================================================
| ft_strlen	: Count length of a char pointer form start to '\0'.			  |
| return	: A length of a char pointer. 						  |
===========================================================================================
| ft_strdup	: duplicate a 's' to a new char pointer. 				  |
| return	: A new char pointer or NULL if allocate is fail.			  |
===========================================================================================
| ft_strlcat	: Is concat a 'src' to 'dest' by the new char pointer is should have a    |
|		  a length = 'size'.							  |
| return	: length of 'dest' + 'src' or if 'size' is less or equal than length of   |
|		  'dest' return 'size' + length of 'src'.			          |
===========================================================================================
| ft_strlcpy	: Copy a 'src' (0 to 'size' - 1) to 'dest'.				  |
| return	: length of 'src' and if 'size' is 0 return length of 'src'		  | 
===========================================================================================
| ft_strchr	: Find an address of 'c' in 's'	by forward. 				  |
|		  ** make sure c is unsigned char(127).					  |
| return	: An address of 's' that start with 'c'. If not have return NULL.	  |
===========================================================================================
| ft_strrchr	: Find an address of 'c' in 's'	by backward. 				  |
|		  ** make sure c is unsigned char(127).					  |
| return	: An address of 's' that start with 'c'. If not have return NULL.	  |
===========================================================================================
| ft_strnstr	: Like strchr but now Find string(char*) 'little' form 'big' in range of  |
|		  'len' and that string should have a length contain with 'len'.	  |
| return	: address of big that found a little, but if 'little' is NULL return	  |
|		  a full address of big or not found return NULL.			  |
===========================================================================================
| ft_strncmp	: Compare a 's1' and 's2'.						  |
| return	: A different of 's1' and 's2'.						  |
===========================================================================================
| ft_atoi		: Turn an ascii that digit to Integer (by can skip whitespace, 	  |
|		  have only one sign(+,-) before a digit, cut it if see that not a digit. |
| return	: An Integer or 0 if it cant change. 					  |
===========================================================================================
| ft_isalpha	: Check is 'c' is alphabet.						  |
| return	: 0 if it not 1 if it correct.						  |
===========================================================================================
| ft_isdigit	: Check is 'c' is digit.						  |
| return	: 0 if it not 1 if it correct.						  |
===========================================================================================
| ft_isalnum	: Check is 'c' is alphabet or digit.					  |
| return	: 0 if it not 1 if it correct.						  |
===========================================================================================
| ft_isascii	: Check is 'c' is ascii.						  |
| return	: 0 if it not 1 if it correct.						  |
===========================================================================================
| ft_isprint	: Check is 'c' is printable.						  |
| return	: 0 if it not 1 if it correct.						  |
===========================================================================================
| ft_toupper	: Turn 'c' to Uppercase.						  |
| return	: c in Uppercase from.							  |
===========================================================================================
| ft_tolower	: Turn 'c' to lowwercase.						  |
| return	: c in lowwercase from.							  |
===========================================================================================

